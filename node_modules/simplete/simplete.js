(function(){'use strict';if(typeof global === "undefined" && typeof window !== "undefined") {
	window.global = window;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}function selectLast(node, selector) {
  var nodes = node.querySelectorAll(selector);
  var length = nodes.length;
  return length ? nodes[length - 1] : null;
}function dispatchEvent(emitter, name, payload) {
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  if (payload) {
    options.detail = payload;
  }
  var ev = new CustomEvent(name, options);
  emitter.dispatchEvent(ev);
}function find(node, selector) {
  if (node.substr) {
    var _ref = [node, selector];
    selector = _ref[0];
    node = _ref[1];
  }
  var nodes = node.querySelectorAll(selector);
  return toArray(nodes);
}
var slice = Array.prototype.slice;
var toArray = function toArray(items) {
  return slice.call(items);
};function bindMethodContext(ctx) {
  for (var _len = arguments.length, methods = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    methods[_key - 1] = arguments[_key];
  }
  methods.forEach(function (name) {
    ctx[name] = ctx[name].bind(ctx);
  });
}var TAG = "simplete-suggestions";
var DEFAULTS = {
  itemSelector: "li",
  fieldSelector: "input[type=hidden]",
  resultSelector: "a"
};
var SimpleteSuggestions =              function (_HTMLElement) {
  _inherits(SimpleteSuggestions, _HTMLElement);
  var _super = _createSuper(SimpleteSuggestions);
  function SimpleteSuggestions(self) {
    var _this;
    _classCallCheck(this, SimpleteSuggestions);
    self = _this = _super.call(this, self);
    bindMethodContext(self, "onQuery", "onResults", "onCycle", "onConfirm", "onAbort");
    return _possibleConstructorReturn(_this, self);
  }
  _createClass(SimpleteSuggestions, [{
    key: "connectedCallback",
    value: function connectedCallback() {
      this.setAttribute("aria-live", "polite");
      this.addEventListener("click", this.onSelect);
      this.nonLocalHandlers("+");
    }
  }, {
    key: "disconnectedCallback",
    value: function disconnectedCallback() {
      this.nonLocalHandlers("-");
    }
  }, {
    key: "onQuery",
    value: function onQuery(ev) {
      var detail = ev.detail;
      if (detail && detail.reset) {
        this.render("");
      } else {
        this.render(null, true);
      }
    }
  }, {
    key: "onResults",
    value: function onResults(ev) {
      var _this2 = this;
      this.render(ev.detail.html);
      var attribs = {
        itemSelector: "data-item-selector",
        fieldSelector: "data-field-selector",
        resultSelector: "data-result-selector"
      };
      Object.keys(attribs).forEach(function (prop) {
        var attr = attribs[prop];
        var container = _this2.parentNode.querySelector("".concat(TAG, " > [").concat(attr, "]"));
        var selector = container && container.getAttribute(attr);
        _this2[prop] = selector || DEFAULTS[prop];
      });
    }
  }, {
    key: "onCycle",
    value: function onCycle(ev) {
      var next = ev.detail.direction === "next";
      var selector = this.itemSelector;
      var currentItem = this.querySelector("".concat(selector, "[aria-selected]"));
      if (!currentItem) {
        currentItem = next ?
        this.querySelector(selector) : selectLast(this, selector);
      } else {
        currentItem.removeAttribute("aria-selected");
        var items = find(this, selector);
        var index = items.indexOf(currentItem);
        if (next) {
          currentItem = items[index + 1] || items[0];
        } else {
          currentItem = index > 0 ? items[index - 1] : items[items.length - 1];
        }
      }
      if (currentItem) {
        currentItem.setAttribute("aria-selected", "true");
        this.selectItem(currentItem, true);
      }
    }
  }, {
    key: "onConfirm",
    value: function onConfirm(ev) {
      var item = this.querySelector("".concat(this.itemSelector, "[aria-selected]"));
      var target = item.querySelector(this.fieldSelector) || item.querySelector(this.resultSelector);
      if (target) {
        target.click();
      }
    }
  }, {
    key: "onAbort",
    value: function onAbort(ev) {
      this.render("");
    }
  }, {
    key: "onSelect",
    value: function onSelect(ev) {
      var item = ev.target.closest(this.itemSelector);
      if (!item) {
        return;
      }
      var field = this.selectItem(item);
      if (field) {
        ev.preventDefault();
      } else {
        ev.target.click();
      }
    }
  }, {
    key: "selectItem",
    value: function selectItem(node, preview) {
      if (!preview) {
        node = node.cloneNode(true);
        this.render("");
      }
      var payload = {
        preview: preview
      };
      var field = node.querySelector(this.fieldSelector);
      if (field) {
        var name = field.name,
            value = field.value;
        Object.assign(payload, {
          name: name,
          value: value
        });
      }
      dispatchEvent(this.root, "simplete-suggestion-selection", payload);
      return !!field;
    }
  }, {
    key: "render",
    value: function render(suggestions, pending) {
      if (pending) {
        this.setAttribute("aria-busy", "true");
      } else {
        this.removeAttribute("aria-busy");
      }
      if (suggestions || suggestions === "") {
        this.innerHTML = suggestions;
      }
    }
  }, {
    key: "nonLocalHandlers",
    value: function nonLocalHandlers(op) {
      op = {
        "+": "addEventListener",
        "-": "removeEventListener"
      }[op];
      var root = this.root;
      root[op]("simplete-query", this.onQuery);
      root[op]("simplete-response", this.onResults);
      root[op]("simplete-nav", this.onCycle);
      root[op]("simplete-confirm", this.onConfirm);
      root[op]("simplete-abort", this.onAbort);
    }
  }, {
    key: "root",
    get: function get() {
      return this.closest("simplete-form");
    }
  }]);
  return SimpleteSuggestions;
}(              _wrapNativeSuper(HTMLElement));function serializeForm(form) {
  var selector = ["input", "textarea", "select"].map(function (tag) {
    return "".concat(tag, "[name]:not(:disabled)");
  }).join(", ");
  var radios = {};
  return find(form, selector).reduce(function (params, node) {
    var name = node.name;
    var value;
    switch (node.nodeName.toLowerCase()) {
      case "textarea":
        value = node.value;
        break;
      case "select":
        value = node.multiple ? find(node, "option:checked").map(function (opt) {
          return opt.value;
        }) : node.value;
        break;
      case "input":
        switch (node.type) {
          case "file":
            console.warn("ignoring unsupported file-input field");
            break;
          case "checkbox":
            if (node.checked) {
              value = node.value;
            }
            break;
          case "radio":
            if (!radios[name]) {
              var field = form.querySelector("input[type=radio][name=".concat(name, "]:checked"));
              value = field ? field.value : undefined;
              if (value) {
                radios[name] = true;
              }
            }
            break;
          default:
            value = node.value;
            break;
        }
        break;
    }
    if (value !== undefined) {
      var values = value || [""];
      if (!values.pop) {
        values = [values];
      }
      values.forEach(function (value) {
        var param = [name, value].map(encodeURIComponent).join("=");
        params.push(param);
      });
    }
    return params;
  }, []).join("&");
}function debounce(delay, ctx, fn) {
  if (fn === undefined) {
    fn = ctx;
    ctx = null;
  }
  var timer;
  return function () {
    var args = arguments;
    if (timer) {
      clearTimeout(timer);
      timer = null;
    }
    timer = setTimeout(function (_) {
      fn.apply(ctx, args);
      timer = null;
    }, delay);
  };
}var TAG$1 = "simplete-form";
var DEFAULTS$1 = {
  searchFieldSelector: "input[type=search]",
  queryDelay: 200,
  minLength: 1
};
var RESET = {};
var SimpleteForm =              function (_HTMLElement) {
  _inherits(SimpleteForm, _HTMLElement);
  var _super = _createSuper(SimpleteForm);
  function SimpleteForm(self) {
    var _this;
    _classCallCheck(this, SimpleteForm);
    self = _this = _super.call(this, self);
    bindMethodContext(self, "onInput", "onResponse");
    return _possibleConstructorReturn(_this, self);
  }
  _createClass(SimpleteForm, [{
    key: "connectedCallback",
    value: function connectedCallback() {
      if (!this.querySelector(TAG)) {
        var results = document.createElement(TAG);
        this.appendChild(results);
      }
      var field = this.searchField;
      field.setAttribute("autocomplete", "off");
      var onQuery = debounce(this.queryDelay, this, this.onQuery);
      this.addEventListener("input", onQuery);
      this.addEventListener("change", onQuery);
      this.addEventListener("simplete-suggestion-selection", this.onSelect);
      field.addEventListener("keydown", this.onInput);
    }
  }, {
    key: "onQuery",
    value: function onQuery(ev) {
      var _this2 = this;
      if (this.searchField.value.length < this.minLength) {
        return;
      }
      this.query = this.searchField.value;
      var res = this.submit();
      if (res === RESET) {
        dispatchEvent(this, "simplete-query", {
          reset: true
        });
      } else if (res) {
        this.setAttribute("aria-busy", "true");
        res.then(this.onResponse).
        catch(function (err) {
          return void _this2.onResponse(null);
        });
        dispatchEvent(this, "simplete-query");
      }
      ev.stopPropagation();
    }
  }, {
    key: "onResponse",
    value: function onResponse(html) {
      this.removeAttribute("aria-busy");
      dispatchEvent(this, "simplete-response", {
        html: html
      });
    }
  }, {
    key: "onInput",
    value: function onInput(ev) {
      if (ev.ctrlKey || ev.altKey || ev.metaKey) {
        return;
      }
      switch (ev.code || ev.key || ev.keyCode) {
        case "Up":
        case "ArrowUp":
        case "Numpad8":
        case 38:
          dispatchEvent(this, "simplete-nav", {
            direction: "prev"
          });
          break;
        case "Down":
        case "ArrowDown":
        case "Numpad2":
        case 40:
          dispatchEvent(this, "simplete-nav", {
            direction: "next"
          });
          break;
        case "Enter":
        case 13:
          if (this.navigating) {
            delete this.navigating;
            dispatchEvent(this, "simplete-confirm");
            ev.preventDefault();
          }
          break;
        case "Esc":
        case "Escape":
        case 27:
          if (this.query) {
            this.searchField.value = this.query;
            delete this.navigating;
            dispatchEvent(this, "simplete-abort");
            ev.preventDefault();
          }
          break;
      }
    }
  }, {
    key: "onSelect",
    value: function onSelect(ev) {
      var _ev$detail = ev.detail,
          value = _ev$detail.value,
          preview = _ev$detail.preview;
      if (preview) {
        this.navigating = true;
      }
      if (value) {
        this.searchField.value = value;
        this.payload = this.serialize();
      }
      if (value && !preview) {
        dispatchEvent(this, "simplete-selection", {
          value: value
        }, {
          bubbles: true
        });
      }
    }
  }, {
    key: "submit",
    value: function submit$$1() {
      if (this.blank) {
        delete this.payload;
        return RESET;
      }
      var payload = this.serialize();
      if (payload === this.payload) {
        return;
      }
      this.payload = payload;
      var _this$formParams = this.formParams,
          uri = _this$formParams.uri,
          method = _this$formParams.method;
      var headers = {
        Accept: "text/html; fragment=true"
      };
      if (method === "GET") {
        return this.httpRequest(method, "".concat(uri, "?").concat(payload), headers);
      } else {
        headers["Content-Type"] = "application/x-www-form-urlencoded";
        return this.httpRequest(method, uri, headers, payload);
      }
    }
  }, {
    key: "serialize",
    value: function serialize() {
      var form = document.createElement("form");
      [].forEach.call(this.children, function (node) {
        var clone = node.cloneNode(true);
        form.appendChild(clone);
      });
      var sug = form.querySelector("simplete-suggestions");
      sug.parentNode.removeChild(sug);
      return serializeForm(form);
    }
  }, {
    key: "httpRequest",
    value: function httpRequest(method, uri, headers, body) {
      var options = {
        method: method,
        credentials: this.cors ? "include" : "same-origin"
      };
      if (headers) {
        options.headers = headers;
      }
      if (body) {
        options.body = body;
      }
      return fetch(uri, options).then(function (res) {
        if (!res.ok) {
          throw new Error("unexpected response: ".concat(res.status));
        }
        return res.text();
      });
    }
  }, {
    key: "blank",
    get: function get() {
      return !this.searchField.value.trim();
    }
  }, {
    key: "searchField",
    get: function get() {
      var selector = this.getAttribute("search-field-selector");
      return this.querySelector(selector || DEFAULTS$1.searchFieldSelector);
    }
  }, {
    key: "formParams",
    get: function get() {
      var form;
      var uri = this.getAttribute("action");
      if (!uri) {
        form = this.form;
        uri = form.getAttribute("action");
      }
      var method = this.getAttribute("method");
      if (!method) {
        if (!form) {
          form = this.form;
        }
        method = form.method || "GET";
      }
      return {
        uri: uri,
        method: method.toUpperCase()
      };
    }
  }, {
    key: "form",
    get: function get() {
      return this.closest("form");
    }
  }, {
    key: "queryDelay",
    get: function get() {
      var value = this.getAttribute("query-delay");
      return value ? parseInt(value, 10) : DEFAULTS$1.queryDelay;
    }
  }, {
    key: "minLength",
    get: function get() {
      var value = this.getAttribute("min-length");
      return value ? parseInt(value, 10) : DEFAULTS$1.minLength;
    }
  }, {
    key: "cors",
    get: function get() {
      return this.hasAttribute("cors");
    }
  }]);
  return SimpleteForm;
}(              _wrapNativeSuper(HTMLElement));customElements.define(TAG$1, SimpleteForm);
customElements.define(TAG, SimpleteSuggestions);}());